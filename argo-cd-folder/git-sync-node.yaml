#do with minikube mostly as it supports load balancing   minikube service blog-service -p minikube
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: html
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 0.5Gi  # Adjust the size as needed

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: blog
spec:
  replicas: 5  # 5 replicas of Nginx
  selector:
    matchLabels:
      name: blog
  template:
    metadata:
      labels:
        name: blog
    spec:
      volumes:  # Define the volume here
      - name: html
        persistentVolumeClaim:
          claimName: html
      containers:
      - name: node-dice
        image: tejasdurge55/dice-nodeapp-gitsync
        ports:
          - containerPort: 3000
        volumeMounts:
        - name: html
          mountPath: /dira/app2

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: git-sync
spec:
  replicas: 1  # Single replica of Git-Sync
  selector:
    matchLabels:
      name: git-sync
  template:
    metadata:
      labels:
        name: git-sync
    spec:
      volumes:  # Define the volume here
      - name: html
        persistentVolumeClaim:
          claimName: html
      containers:
      - name: git-sync
        image: k8s.gcr.io/git-sync:v3.0.1
        volumeMounts:
        - name: html
          mountPath: /tmp/git
        env:
        - name: GIT_SYNC_REPO
          value: https://github.com/tejasdurge55/dice-game-git-sync-node.git
        - name: GIT_SYNC_DEST
          value: app

---
apiVersion: v1
kind: Service
metadata:
  name: blog-service
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 3000
    nodePort: 32000
  selector:
    name: blog  # Selector for pods

    #docker kubernetes Loadbalancer command: kubectl port-forward service/blog-service 8099:80
    #then app is visible at localhost:8099

    #docker kubernetes NodePort command: kubectl port-forward service/blog-service 8099:80
    #then app is visible at localhost:8099
